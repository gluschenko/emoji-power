using System.Net.Http;
using System.Text;
using EmojiPower.Core;
using EmojiPower.Core.Models;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace EmojiPower.Generator
{
    [Generator]
    public class EmojiGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            var extractor = new EmojiExtractor(new HttpClient());
            var descriptors = extractor.ExtractAsync().GetResult();

            var className = "Emoji";

            var sourceBuilder = new StringBuilder();

            sourceBuilder.AppendLine($@"
            var result = new List<BaseUnicodeDescriptor>();
            ");

            foreach (var descriptor in descriptors)
            {
                if (descriptor is SingleUnicodeDescriptor singleUnicodeDescriptor)
                {
                    sourceBuilder.AppendLine($@"
                    result.Add(new SingleUnicodeDescriptor
                    {{
                        Value = ""{singleUnicodeDescriptor.Value.ToLiteral()}"",
                        Type = ""{singleUnicodeDescriptor.Type.ToLiteral()}"",
                        Description = ""{singleUnicodeDescriptor.Description.ToLiteral()}"",
                        Comment = ""{singleUnicodeDescriptor.Comment.ToLiteral()}"",
                    }});
                    ");
                }
                else if (descriptor is RangeUnicodeDescriptor rangeUnicodeDescriptor)
                {
                    sourceBuilder.AppendLine($@"
                    result.Add(new RangeUnicodeDescriptor
                    {{
                        Start = ""{rangeUnicodeDescriptor.Start.ToLiteral()}"",
                        End = ""{rangeUnicodeDescriptor.End.ToLiteral()}"",
                        Type = ""{rangeUnicodeDescriptor.Type.ToLiteral()}"",
                        Description = ""{rangeUnicodeDescriptor.Description.ToLiteral()}"",
                        Comment = ""{rangeUnicodeDescriptor.Comment.ToLiteral()}"",
                    }});
                    ");
                }
            }

            sourceBuilder.AppendLine($@"
            return result;
            ");

            var code = $@"
// <auto-generated/>
using System;
using System.Collections.Generic;
using EmojiPower.Core;
using EmojiPower.Core.Models;

namespace {nameof(EmojiPower)}
{{
    public static class {className}
    {{
        /// <summary>
        /// This is source-generated version of this code:
        /// 
        /// <code>
        /// var extractor = new EmojiExtractor(new HttpClient());
        /// var descriptors = await extractor.ExtractAsync();
        /// return descriptors;
        /// </code>
        /// </summary>
        public static IEnumerable<BaseUnicodeDescriptor> GetEmoji() 
        {{
            {sourceBuilder}
        }}
    }}
}}
            ";

            context.AddSource($"{className}.g.cs", SourceText.From(code, Encoding.UTF8));
        }

        public void Initialize(GeneratorInitializationContext context)
        {
        }

        
    }
}
